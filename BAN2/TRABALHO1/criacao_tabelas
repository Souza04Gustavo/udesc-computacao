-- TRABALHO 1 - PARTE 2: DDL-SQL
-- SCRIPT DE CRIAÇÃO DO BANCO DE DADOS PARA SISTEMA DE AGENDAMENTO
-- SGBD: PostgreSQL

-- Remove tabelas existentes para permitir a recriação do zero
DROP TABLE IF EXISTS AGENDAMENTO_MATERIAL, EVENTO_QUADRA, QUADRA_ESPORTE, CHAMADO_MANUTENCAO, AGENDAMENTO, EXTRAORDINARIO, RECORRENTE, EVENTO, BOLSISTA, NAO_BOLSISTA, ADMIN, FUNCIONARIO, ALUNO, SERVIDOR, USUARIO, MATERIAL_ESPORTIVO, QUADRA, GINASIO, ESPORTE CASCADE;

-- ========= CRIAÇÃO DAS TABELAS BASE (SEM DEPENDÊNCIAS EXTERNAS) =========

CREATE TABLE GINASIO (
    id_ginasio SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    endereco VARCHAR(255),
    capacidade INT
);

CREATE TABLE ESPORTE (
    id_esporte SERIAL PRIMARY KEY,
    nome VARCHAR(50) NOT NULL UNIQUE,
    max_jogadores INT
);

CREATE TABLE USUARIO (
    cpf VARCHAR(11) PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha TEXT NOT NULL, -- Usar TEXT para armazenar o hash da senha
    data_nasc DATE,
    status VARCHAR(20) NOT NULL CHECK (status IN ('ativo', 'inativo'))
);

-- ========= CRIAÇÃO DAS TABELAS DEPENDENTES (NÍVEL 1) =========

CREATE TABLE QUADRA (
    id_ginasio INT NOT NULL,
    num_quadra INT NOT NULL,
    capacidade INT,
    tipo_piso VARCHAR(50),
    cobertura BOOLEAN DEFAULT TRUE,
    status VARCHAR(50) CHECK (status IN ('disponivel', 'manutencao', 'interditada')),
    PRIMARY KEY (id_ginasio, num_quadra),
    FOREIGN KEY (id_ginasio) REFERENCES GINASIO(id_ginasio) ON DELETE CASCADE
);

CREATE TABLE MATERIAL_ESPORTIVO (
    id_material SERIAL PRIMARY KEY,
    id_ginasio INT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    marca VARCHAR(50),
    status VARCHAR(50) CHECK (status IN ('bom', 'danificado', 'manutencao')),
    qnt_total INT NOT NULL DEFAULT 0,
    qnt_disponivel INT NOT NULL DEFAULT 0,
    FOREIGN KEY (id_ginasio) REFERENCES GINASIO(id_ginasio) ON DELETE RESTRICT
);

-- Tabelas de especialização de USUARIO
CREATE TABLE ALUNO (
    cpf VARCHAR(11) PRIMARY KEY,
    matricula VARCHAR(20) NOT NULL UNIQUE,
    curso VARCHAR(100),
    ano_inicio INT,
    FOREIGN KEY (cpf) REFERENCES USUARIO(cpf) ON DELETE CASCADE
);

CREATE TABLE SERVIDOR (
    cpf VARCHAR(11) PRIMARY KEY,
    id_servidor VARCHAR(20) NOT NULL UNIQUE,
    data_admissao DATE,
    FOREIGN KEY (cpf) REFERENCES USUARIO(cpf) ON DELETE CASCADE
);

-- ========= CRIAÇÃO DAS TABELAS DEPENDENTES (NÍVEL 2 - ESPECIALIZAÇÕES) =========

-- Tabelas de especialização de ALUNO
CREATE TABLE NAO_BOLSISTA (
    cpf VARCHAR(11) PRIMARY KEY,
    FOREIGN KEY (cpf) REFERENCES ALUNO(cpf) ON DELETE CASCADE
);

CREATE TABLE BOLSISTA (
    cpf VARCHAR(11) PRIMARY KEY,
    valor_remuneracao NUMERIC(10, 2),
    carga_horaria INT,
    horario_inicio TIME,
    horario_fim TIME,
    id_supervisor_servidor VARCHAR(20), -- Referencia SERVIDOR(id_servidor)
    FOREIGN KEY (cpf) REFERENCES ALUNO(cpf) ON DELETE CASCADE
    -- A FK para o supervisor será adicionada via ALTER TABLE para evitar dependência cíclica na criação
);

-- Tabelas de especialização de SERVIDOR
CREATE TABLE FUNCIONARIO (
    cpf VARCHAR(11) PRIMARY KEY,
    departamento VARCHAR(100),
    cargo VARCHAR(100),
    FOREIGN KEY (cpf) REFERENCES SERVIDOR(cpf) ON DELETE CASCADE
);

CREATE TABLE ADMIN (
    cpf VARCHAR(11) PRIMARY KEY,
    nivel_acesso INT DEFAULT 1,
    area_responsabilidade VARCHAR(100),
    data_ultimo_login TIMESTAMP,
    FOREIGN KEY (cpf) REFERENCES SERVIDOR(cpf) ON DELETE CASCADE
);

-- ========= CRIAÇÃO DAS TABELAS DE EVENTOS E AGENDAMENTOS =========

CREATE TABLE EVENTO (
    id_evento SERIAL PRIMARY KEY,
    cpf_admin_organizador VARCHAR(11) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    descricao TEXT,
    FOREIGN KEY (cpf_admin_organizador) REFERENCES ADMIN(cpf) ON DELETE RESTRICT
);

-- Tabelas de especialização de EVENTO
CREATE TABLE EXTRAORDINARIO (
    id_evento INT PRIMARY KEY,
    data_hora_inicio TIMESTAMP NOT NULL,
    data_hora_fim TIMESTAMP NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES EVENTO(id_evento) ON DELETE CASCADE
);

CREATE TABLE RECORRENTE (
    id_evento INT PRIMARY KEY,
    regra_recorrencia TEXT NOT NULL, -- Ex: 'FREQ=WEEKLY;BYDAY=TU;BYHOUR=18;BYMINUTE=0'
    data_fim_recorrencia DATE,
    FOREIGN KEY (id_evento) REFERENCES EVENTO(id_evento) ON DELETE CASCADE
);

CREATE TABLE AGENDAMENTO (
    id_agendamento SERIAL PRIMARY KEY,
    cpf_usuario VARCHAR(11) NOT NULL,
    id_ginasio INT NOT NULL,
    num_quadra INT NOT NULL,
    data_solicitacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    hora_ini TIMESTAMP NOT NULL,
    hora_fim TIMESTAMP NOT NULL,
    motivo TEXT,
    status_agendamento VARCHAR(50) NOT NULL CHECK (status_agendamento IN ('confirmado', 'cancelado', 'realizado', 'nao_compareceu')),
    id_bolsista_operador VARCHAR(11), -- CPF do bolsista
    data_operacao_bolsista TIMESTAMP,
    FOREIGN KEY (cpf_usuario) REFERENCES USUARIO(cpf) ON DELETE RESTRICT,
    FOREIGN KEY (id_ginasio, num_quadra) REFERENCES QUADRA(id_ginasio, num_quadra) ON DELETE RESTRICT,
    FOREIGN KEY (id_bolsista_operador) REFERENCES BOLSISTA(cpf) ON DELETE SET NULL
);

CREATE TABLE CHAMADO_MANUTENCAO (
    id_cha SERIAL PRIMARY KEY,
    cpf_usuario_abriu VARCHAR(11) NOT NULL,
    id_ginasio INT NOT NULL,
    num_quadra INT NOT NULL,
    data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    descricao TEXT NOT NULL,
    FOREIGN KEY (cpf_usuario_abriu) REFERENCES USUARIO(cpf) ON DELETE RESTRICT,
    FOREIGN KEY (id_ginasio, num_quadra) REFERENCES QUADRA(id_ginasio, num_quadra) ON DELETE CASCADE
);

-- ========= CRIAÇÃO DAS TABELAS DE JUNÇÃO (RELACIONAMENTOS N:M) =========

CREATE TABLE QUADRA_ESPORTE (
    id_ginasio INT NOT NULL,
    num_quadra INT NOT NULL,
    id_esporte INT NOT NULL,
    PRIMARY KEY (id_ginasio, num_quadra, id_esporte),
    FOREIGN KEY (id_ginasio, num_quadra) REFERENCES QUADRA(id_ginasio, num_quadra) ON DELETE CASCADE,
    FOREIGN KEY (id_esporte) REFERENCES ESPORTE(id_esporte) ON DELETE CASCADE
);

CREATE TABLE EVENTO_QUADRA (
    id_evento INT NOT NULL,
    id_ginasio INT NOT NULL,
    num_quadra INT NOT NULL,
    PRIMARY KEY (id_evento, id_ginasio, num_quadra),
    FOREIGN KEY (id_evento) REFERENCES EVENTO(id_evento) ON DELETE CASCADE,
    FOREIGN KEY (id_ginasio, num_quadra) REFERENCES QUADRA(id_ginasio, num_quadra) ON DELETE CASCADE
);

CREATE TABLE AGENDAMENTO_MATERIAL (
    id_agendamento INT NOT NULL,
    id_material INT NOT NULL,
    quantidade_solicitada INT NOT NULL DEFAULT 1,
    PRIMARY KEY (id_agendamento, id_material),
    FOREIGN KEY (id_agendamento) REFERENCES AGENDAMENTO(id_agendamento) ON DELETE CASCADE,
    FOREIGN KEY (id_material) REFERENCES MATERIAL_ESPORTIVO(id_material) ON DELETE RESTRICT
);

-- Adiciona a FK de BOLSISTA para SERVIDOR (supervisor) que foi adiada
ALTER TABLE BOLSISTA ADD CONSTRAINT fk_supervisor
FOREIGN KEY (id_supervisor_servidor) REFERENCES SERVIDOR(id_servidor) ON DELETE SET NULL;